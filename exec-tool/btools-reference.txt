<?php
$isWodan = false;
if (isWodan()) {
   $isWodan = true;
}

if (!$isWodan) {
   return;
}

$snippets = Q('admin_shared.wdn_snippets')
   ->notextcolumns()
   ->setOrderAsc('name')
   ->where('page', 'btools/exec')
   ->grabAll()
;

if (isset($_POST['code'])) { 
   if (opts('exec-only')) { 
      // om ervoor te zorgen dat je een "laatst opgesalgen hebt.."..
      ob_start();
         echo ckl_dispatch_string('utils/snippet?pid='.$this->url);
      $null = ob_get_clean();
   }

   if (class_exists('ALF_Parser')) { 
      $p = new ALF_Parser;
      ob_start();
      $p->setSource($_POST['code']);
      $_POST['code'] = $p->parse();
      $null = ob_get_clean();
   }

   //debug: \\pr ($_POST['code'])


   ob_start();
         $code = trim($_POST['code']);
   
         $lines = substr_count($code,"\n");
         $semicolons = substr_count($code,";");
         $eval = true;
   
         if (get_preg_match($code,'/^(EXPLAIN|SELECT|UPDATE|SHOW|DELETE|DROP|INSERT|REPLACE|DESCRIBE|TRUNCATE|ALTER) .+$/s')) {
            // SQL mode:
            echo "SQL Mode";
            $model = Q()->fromSQL($code);
            $data = $model->grabAll();
   
            if ($model->isError()) {
               throw new JsonResponse(array('error' => ['type' => 'SQLError', 'message' => $model->getError()]));
               $data['SqlError'] = $model->getError();
            }
            $eval = false;
         } elseif ($lines === 0 || $semicolons === 1) {
            if (strpos($code,';') === false) {
               $code .= ';';
            }
            if (!get_preg_match($code,'/^(return|echo)[( ].+/')) {
               $code = 'return ' . $code;
            }
         }
   
         $previousError = error_get_last();
         if ($eval) {
            $data = eval($code);
         }
   $string = ob_get_clean();

   $string = repl(array('<form ' => '<div ','</form>' => '</div>'), $string); 


   $json_encode_tolerant = function ($data) {
      $json = json_encode($data);

      if (json_last_error() === JSON_ERROR_UTF8) {
         $data['content'] = utf8_encode(data);

         $json = json_encode($data);
      }

      return $json;
   };

   $json = isset($_REQUEST['json'])?$_REQUEST['json']:null;
   if ($json) { 
      $response = array();
      $response['data'] = $data;

      if ($string > '') { 
         $response['content'] = $string;
      }

      if ($data === false) {
         if ($previousError === error_get_last()) {
            // do nothing.
         } else {
            $response['error'] = error_get_last();
         }
      } else {
         // do nothing.
      }

      $json = $json_encode_tolerant($response);

      throw new Response($json);

   } else {
      if ($data !== null) {
         echo '<pre>';ob_start('h'); print_r($data); ob_end_flush(); echo '</pre>' . PHP_EOL;
      }
   }
}
?>
<template url="/">
    <div>BTOOLS EXEC</div>
</template>
<div class="page-exec" dflx-app="wodanExec" ng-controller="WodanExecController">
   <div ng-show="mode=='editor'" class="editor">
      <form ng-submit="submitCode()">
         <div class="header">
            #{{snippet.id || 'New snippet'}} <input ng-model="snippet.name"> 
            <input ng-show="snippet.id" type="button" ng-click="updateSnippet()" value="Update snippet">
            <input ng-hide="snippet.id" type="button" ng-click="createSnippet()" ng-disabled="!snippet.name" value="Create snippet">

            <button type="button" class="pull-right" ng-click="mode='browser'">Snippets</button>

            <input type="button" ng-click="snippet=false; code='';" value="Clear">
         </div>
         <textarea placeholder="Run your code here" ng-model="code"></textarea>
         <br>
         <div>
            <div class="btn" ng-click="view='json'">JSON</div>
            <div class="btn" ng-click="view='grid'">Grid</div>
            <div class="btn" ng-click="view='html'">HTML</div>
            <input class="pull-right" type="submit" value="Uitvoeren">
         </div>
      </form>

      <div ng-switch="view">
         <div ng-switch-when="json">
            <pre ng-show="result" ng-bind-html="result"></pre>
         </div>
         <div ng-switch-when="html">
            <pre ng-show="result" ng-bind-html="result.content"></pre>
         </div>
         <div ng-switch-when="grid">
            <table class="styled" width="100%">
               <thead>
                  <tr>
                     <th ng-repeat="key in gridKeys"
                        ng-click="setGridOrder(key)" 
                     >{{key}}</th>
                  </tr>
               </thead>
               <tr ng-repeat="row in raw.data | orderBy:gridOrder:gridReverse">
                  <td ng-repeat="key in gridKeys">
                     {{row[key]}}
                  </td>
               </tr>
            </table>
         </div>
      </div>
      
   </div>
   <div ng-show="mode=='browser'" class="browser">
      <table class="styled">
         <tr>
            <td colspan="3">
               <button type="button" class="pull-right" ng-click="mode='editor'">Back</button>
               <input ng-model="searchSnippet" placeholder="Search snippet">
            </td>
         </tr>
         <tr ng-repeat="snippet in snippets | filter:searchSnippet" ng-click="selectSnippet(snippet)">
            <td>{{snippet.name || 'Naamloos'}}</td>
            <td>{{snippet.author || 'Onbekend'}}</td>
            <td>{{snippet.modified}}</td>
         </tr>
      </table>
   </div>
</div>
<style>
.page-exec .editor textarea {
   width:100%; 
   height:250px; 
   font-family:mono,monospace; 
   font-size:11px;
}
.page-exec .editor .header { 
   padding: 4px;  
   margin-bottom: 10px; 
}
.page-exec .browser table {
   width: 100%;
} 
.page-exec input:disabled {
   color: #aaa;   
}
</style>
<script>
angularReady(function (angular) {
   angular.module('wodanExec', []).controller('WodanExecController', 
      function WodanExecController($scope, $sce, $filter) {
         $scope.code = '';
         $scope.result = $sce.trustAsHtml('');
         $scope.mode = 'editor';
         $scope.raw = false;
         $scope.view = 'json';

         var snippets = [];
         //var snippets = <?=json_encode($snippets)?>;

         $scope.snippets = snippets;

         $scope.gridOrder = false;
         $scope.gridReverse = false;
         
         $scope.setGridOrder = function (key) {
            if ($scope.gridOrder == key) {
               $scope.gridReverse = !$scope.gridReverse;
            } else {
               $scope.gridReverse = false;
               $scope.gridOrder = key;
            }
         };

         $scope.$watchCollection('[raw, view]', function () {
            var t = $scope.raw;
            if ($scope.view === 'json') { 
               if (t.error) { 
                  $scope.result = $filter('json')(t);
               } else {
                  $scope.result = $filter('json')(t);
               }
               $scope.result = $scope.result.replace(/\\n/g, '<br>');
               $scope.result = $sce.trustAsHtml($scope.result || '');
            } else if ($scope.view === 'html') {
               $scope.result.content = $sce.trustAsHtml(t.content || '');
            } else {
               $scope.gridKeys = [];
               for (key in t.data[0]) {
                  $scope.gridKeys.push(key);
               }
            }
         }); 

         $scope.submitCode = function () { 
            $scope.result = $sce.trustAsHtml('Executing...');

            $.ajax({
              type: "POST",
              url: '<?= URL ?>',
              data: {code: $scope.code, json: true},
              success: function (t) {
                  $scope.$apply(function () {
                     $scope.raw = t;
                  });
               },
               error: function (t) {
                  $scope.$apply(function () {
                     $scope.result = $sce.trustAsHtml(t.responseText.replace(/\n/g, '<br>'));
                  });
               },
               dataType: 'json'
            });
         };

         $scope.selectSnippet = function (snippet) {

            urlLoadSnippet = "btools/exec_3b2d95";

            $.getJSON(flux.url(urlLoadSnippet) + '?s=' + snippet.id, function (t) {
               $scope.$apply(function () {
                  $scope.mode = 'editor';
                  $scope.code = t.code;
                  $scope.result = '';
                  $scope.snippet = snippet;
               });
            });
         };

         $scope.updateSnippet = function () {
            var save = $scope.snippet;
            save.content = $scope.code;

            urlUpdateSnippet = "btools/exec_85e500";

            $.post(flux.url(urlUpdateSnippet), {snippet:save}, function (t) {
               if (t.result) { 
                  flash('Snippet opgeslagen','success');
               } else {
                  flash('Snippet niet opgeslagen','error');
               }

            }, 'json');
         };         

         $scope.createSnippet = function () {
            var save = $scope.snippet;
            save.content = $scope.code;

            urlCreateSnippet = "btools/exec_97b7f4";

            $.post(flux.url(urlCreateSnippet), {snippet:save}, function (t) {
               $scope.$apply(function () {
                  $scope.snippet.id = t.id;
               });
            }, 'json');
         };         

      }
   );
});
</script>

